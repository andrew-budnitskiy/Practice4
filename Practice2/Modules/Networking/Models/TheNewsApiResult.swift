//
// TheNewsApiResultsData.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct TheNewsApiResult: Codable, Identifiable, Hashable {

    public var id = UUID()

    public var uuid: String?
    public var title: String?
    public var _description: String?
    public var keywords: String?
    public var snippet: String?
    public var url: String?
    public var imageUrl: String?
    public var language: String?
    public var publishedAt: String?
    public var source: String?
    public var categories: [String]?
    public var relevanceScore: String?

    public init(uuid: String? = nil, title: String? = nil, _description: String? = nil, keywords: String? = nil, snippet: String? = nil, url: String? = nil, imageUrl: String? = nil, language: String? = nil, publishedAt: String? = nil, source: String? = nil, categories: [String]? = nil, relevanceScore: String? = nil) {
        self.uuid = uuid
        self.title = title
        self._description = _description
        self.keywords = keywords
        self.snippet = snippet
        self.url = url
        self.imageUrl = imageUrl
        self.language = language
        self.publishedAt = publishedAt
        self.source = source
        self.categories = categories
        self.relevanceScore = relevanceScore
    }

    public enum CodingKeys: String, CodingKey { 
        case uuid
        case title
        case _description = "description"
        case keywords
        case snippet
        case url
        case imageUrl = "image_url"
        case language
        case publishedAt = "published_at"
        case source
        case categories
        case relevanceScore = "relevance_score"
    }

}

extension TheNewsApiResult: NewsItemProtocol {
    var header: String {
        return self.title.or("the news header is empty")
    }

    var writer: String {
        return ""
    }

    var description: String {
        return self._description.or("the news body is empty")
    }

    var origin: String {
        return self.source.or("-")
    }

    var publishingDate: String {

        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale(identifier: "en_US_POSIX")
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.ssssssZ"

        let dateValue = dateFormatter.date(from: self.publishedAt.or(""))
        return dateValue?.toString(withFormat: "dd.MM.yyyy HH:mm") ?? self.publishedAt ?? "-"
    }
}
